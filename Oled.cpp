#include "Oled.hpp"
#include "Logger.hpp"

//TeensyView oled(OLED_PIN_RESET, OLED_PIN_DC, OLED_PIN_CS, OLED_PIN_SCK, OLED_PIN_MOSI);

static uint8_t sidewinder[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0x78, 0x7c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0xf8, 0xf8, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xfe, 0xdf, 0x8f, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x18, 0x18, 0x18, 0x1c, 0x9c, 0x0e, 0x0e, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xe0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf0, 0xb8, 0xd8, 0xfc, 0x7c, 0x3c, 0x18, 0xc0, 0xe0, 0x20, 0x20, 0x20, 0x20, 0x63, 0x67, 0x47, 0x0f, 0x0f, 0x1f, 0x1e, 0x3e, 0xfc, 0xf8, 0x70, 0x00, 0xc0, 0xc0, 0xe0, 0x70, 0x37, 0x07, 0x87, 0xe0, 0xf0, 0x30, 0x18, 0x18, 0xd8, 0xf0, 0x78, 0x1e, 0x0f, 0xe3, 0xf1, 0xd8, 0x4c, 0x6c, 0xbc, 0xc8, 0xe0, 0x78, 0x3c, 0x9c, 0xc0, 0xf0, 0x38, 0x88, 0xc0, 0x7c, 0x3e, 0xee, 0xf0, 0x38, 0x9c, 0xcc, 0xe0, 0xf0, 0x3c, 0x9c, 0xec, 0x7c, 0x3c, 0x9c, 0xc0, 0xf0, 0x38, 0x18, 0x8c, 0xcc, 0xf8, 0x3c, 0x1e, 0xc7, 0xe3, 0xb1, 0x90, 0x58, 0x30, 0x00, 0xd0, 0xf0, 0x70, 0x20, 0xe0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x1f, 0x1f, 0x3f, 0x18, 0x18, 0x1c, 0x0e, 0x06, 0x03, 0x0f, 0x0f, 0x1e, 0x1e, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x0e, 0x0e, 0x0e, 0x07, 0x03, 0x01, 0x00, 0x00, 0x07, 0x07, 0x06, 0x06, 0x02, 0x01, 0x03, 0x03, 0x06, 0x02, 0x02, 0x03, 0x07, 0x07, 0x02, 0x02, 0x01, 0x03, 0x03, 0x02, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x02, 0x03, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x03, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03, 0x01, 0x01, 0x03, 0x07, 0x04, 0x02, 0x03, 0x06, 0x07, 0x03, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
static uint8_t teslalogo[] = { 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x50, 0xd8, 0xd8, 0xc8, 0xc8, 0x68, 0x68, 0x68, 0xe8, 0xe8, 0xec, 0xec, 0x0c, 0x0c, 0xec, 0xec, 0xe8, 0xe8, 0x68, 0x68, 0x68, 0xc8, 0xc8, 0xd8, 0xd8, 0x50, 0x10, 0x10, 0x00, 0x00, 0x00, 0x04, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xfc, 0xfc, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00,
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7f, 0xff, 0xff, 0x7f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x89, 0x89, 0xff, 0x76, 0x00, 0xff, 0xff, 0x0e, 0x38, 0xe0, 0x38, 0x0e, 0xff, 0xff, 0x00, 0x4e, 0x9f, 0x99, 0xf9, 0x72, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x89, 0x89, 0xff, 0x76, 0x00, 0xff, 0xff, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

/////////////////////////////////////////////////
/// \brief Constructor for the Oled teensyView display
/////////////////////////////////////////////////
Oled::Oled(Controller* cont_inst_ptr, TeensyView* teensyView_inst_ptr){
  oled_ptr = teensyView_inst_ptr;
  oled_ptr->begin();      // Initialize the OLED
  oled_ptr->clear(ALL);   // Clear the display's internal memory
  oled_ptr->display();    // Display what's in the buffer (splashscreen)
  oled_ptr->clear(PAGE);  // Clear the buffer.
  state = FMT6;
  controller_inst_ptr = cont_inst_ptr;
}

/*
  Vbat
  Tbat
*/
void Oled::printFormat1() {
  const int col0 = 0;
  const int col1 = oled_ptr->getLCDWidth() / 2;

  oled_ptr->clear(PAGE);         // Clear the display
  oled_ptr->setCursor(col0, 0);  // Set cursor to top-left
  oled_ptr->setFontType(1);      // Smallest font
  oled_ptr->print("Vbat");
  oled_ptr->setCursor(col1, 0);
  oled_ptr->print("Tbat");

  oled_ptr->setFontType(2);  // 7-segment font
  oled_ptr->setCursor(col0, oled_ptr->getLCDHeight() / 2);
  oled_ptr->print(controller_inst_ptr->getBMSPtr()->getPackVoltage(), 1);
  oled_ptr->setCursor(col1, oled_ptr->getLCDHeight() / 2);
  oled_ptr->print(controller_inst_ptr->getBMSPtr()->getAvgTemperature());
  oled_ptr->display();
}

/*
  VClo
  VChi      ou VCdiff au lieu de ces deux valeursâ€¦
*/
void Oled::printFormat2() {
  const int col0 = 0;
  const int col1 = oled_ptr->getLCDWidth() / 2;

  oled_ptr->clear(PAGE);         // Clear the display
  oled_ptr->setCursor(col0, 0);  // Set cursor to top-left
  oled_ptr->setFontType(1);      // Smallest font
  oled_ptr->print("VClo");       // Print "A0"
  oled_ptr->setCursor(col1, 0);
  oled_ptr->print("VChi");

  oled_ptr->setFontType(2);  // 7-segment font
  oled_ptr->setCursor(col0, oled_ptr->getLCDHeight() / 2);
  oled_ptr->print(controller_inst_ptr->getBMSPtr()->getLowCellVolt());  // Print a0 reading
  oled_ptr->setCursor(col1, oled_ptr->getLCDHeight() / 2);
  oled_ptr->print(controller_inst_ptr->getBMSPtr()->getHighCellVolt());
  oled_ptr->display();
}

/*

  VCmin
  VCmax
*/
void Oled::printFormat3() {
  const int col0 = 0;
  const int col1 = oled_ptr->getLCDWidth() / 2;

  oled_ptr->clear(PAGE);         // Clear the display
  oled_ptr->setCursor(col0, 0);  // Set cursor to top-left
  oled_ptr->setFontType(1);      // Smallest font
  oled_ptr->print("VCmin");
  oled_ptr->setCursor(col1, 0);
  oled_ptr->print("VCmax");

  oled_ptr->setFontType(2);  // 7-segment font
  oled_ptr->setCursor(col0, oled_ptr->getLCDHeight() / 2);
  oled_ptr->print(controller_inst_ptr->getBMSPtr()->getHistLowestCellVolt());
  oled_ptr->setCursor(col1, oled_ptr->getLCDHeight() / 2);
  oled_ptr->print(controller_inst_ptr->getBMSPtr()->getHistHighestCellVolt());
  oled_ptr->display();
}

/*
  VCdmax
  Tmax
*/
void Oled::printFormat4() {
  const int col0 = 0;
  const int col1 = oled_ptr->getLCDWidth() / 2;

  oled_ptr->clear(PAGE);         // Clear the display
  oled_ptr->setCursor(col0, 0);  // Set cursor to top-left
  oled_ptr->setFontType(1);      // Smallest font
  //oled_ptr->print("VCdmax");
  oled_ptr->print("VCdiff");
  oled_ptr->setCursor(col1, 0);
  oled_ptr->print("Tmax");

  oled_ptr->setFontType(2);  // 7-segment font
  oled_ptr->setCursor(col0, oled_ptr->getLCDHeight() / 2);
  //oled_ptr->print(controller_inst_ptr->getBMSPtr()->getHistHighestCellDiffVolt());
  oled_ptr->print(controller_inst_ptr->getBMSPtr()->getHighCellVolt() - controller_inst_ptr->getBMSPtr()->getLowCellVolt());

  oled_ptr->setCursor(col1, oled_ptr->getLCDHeight() / 2);
  //oled_ptr->setFontType(1);
  oled_ptr->print(controller_inst_ptr->getBMSPtr()->getHistHighestPackTemp());
  oled_ptr->display();
}

void Oled::printFormat5() {
  switch (controller_inst_ptr->getState()) {
    case Controller::INIT:
      Oled::printCentre("INIT", 1);
      break;
    case Controller::STANDBY:
      Oled::printCentre("STANDBY", 1);
      break;
    case Controller::PRE_CHARGE:
      Oled::printCentre("PRE_CHARGE", 1);
      break;
    case Controller::CHARGING:
      Oled::printCentre("CHARGING", 1);
      break;
    case Controller::TOP_BALANCING:
      Oled::printCentre("TOP_BALANCING", 1);
      break;
    case Controller::POST_CHARGE:
      Oled::printCentre("PRE_CHARGE", 1);
      break;
    case Controller::RUN:
      Oled::printCentre("RUN", 1);
      break;
    default:
      Oled::printCentre("default", 1);
      break;
  }
}

void Oled::printTeslaBMSRT() {
  oled_ptr->drawBitmap(teslalogo);
  oled_ptr->display();
}

void Oled::printESidewinder() {
  oled_ptr->drawBitmap(sidewinder);
  oled_ptr->display();
}

void Oled::printStickyFaults() {
  const int col0 = 0;

  oled_ptr->clear(PAGE);         // Clear the display
  oled_ptr->setCursor(col0, 0);  // Set cursor to top-left
  oled_ptr->setFontType(1);      // Smallest font
  oled_ptr->print("sFault Codes");
  oled_ptr->setCursor(col0, oled_ptr->getLCDHeight() / 2);

  for (auto i = controller_inst_ptr->faults.begin(); i != controller_inst_ptr->faults.end(); i++) {
    if ((*i)->getSFault()) {
      oled_ptr->print((*i)->getCode());
    }
  }
  oled_ptr->display();
}

void Oled::printFaults() {
  const int col0 = 0;

  oled_ptr->clear(PAGE);         // Clear the display
  oled_ptr->setCursor(col0, 0);  // Set cursor to top-left
  oled_ptr->setFontType(1);      // Smallest font
  oled_ptr->print("Fault Codes");
  oled_ptr->setCursor(col0, oled_ptr->getLCDHeight() / 2);

  for (auto i = controller_inst_ptr->faults.begin(); i != controller_inst_ptr->faults.end(); i++) {
    if ((*i)->getFault()) {
      oled_ptr->print((*i)->getCode());
    }
  }
  oled_ptr->display();
}

bool Oled::changeState() {
  static uint32_t ts = 0;
  uint32_t ts2 = millis();
  if (ts2 - ts > controller_inst_ptr->getSettingsPtr()->oled_cycle_time.getVal()) {
    ts = ts2;
    return true;
  } else {
    return false;
  }
}

/////////////////////////////////////////////////
/// \brief doOled is the function that executes a tick of the Oled state machine.
///
/// The Oled cycles through formats after a predefined number of ticks. At each tick, it updates what is currently displayed in the current format.
/////////////////////////////////////////////////
void Oled::doOled() {
  switch (state) {
    case FMT1:
      printFormat1();
      if (changeState()) {
        state = FMT2;
      }
      break;
    case FMT2:
      printFormat2();
      if (changeState()) {
        state = FMT3;
      }
      break;
    case FMT3:
      printFormat3();
      if (changeState()) {
        state = FMT4;
      }
      break;
    case FMT4:
      printFormat4();
      if (changeState()) {
        state = FMT5;
      }
      break;
    case FMT5:
      printFormat5();
      if (changeState()) {
        state = FMT6;
      }
      break;
    case FMT6:
      printTeslaBMSRT();
      if (changeState()) {
        state = FMT7;
      }
      break;
    case FMT7:
      printESidewinder();
      if (changeState()) {
        if (controller_inst_ptr->isFaulted) {
          state = FMT8;
        } else if (controller_inst_ptr->stickyFaulted) {
          state = FMT9;
        } else {
          state = FMT1;
        }
      }
      break;
    case FMT8:
      printFaults();
      if (changeState()) {
        state = FMT9;
      }
      break;
    case FMT9:
      printStickyFaults();
      if (changeState()) {
        state = FMT1;
      }
      break;
    default:
      break;
  }
}

// Center and print a small values string
// This function is quick and dirty. Only works for titles one
// line long.
void Oled::printCentre(const char* value, int font) {
  int middleX = oled_ptr->getLCDWidth() / 2;
  int middleY = oled_ptr->getLCDHeight() / 2;

  oled_ptr->clear(PAGE);
  oled_ptr->setFontType(font);
  // Try to set the cursor in the middle of the screen
  oled_ptr->setCursor(middleX - (oled_ptr->getFontWidth() * (strlen(value) / 2)) - 4,
                 middleY - (oled_ptr->getFontHeight() / 2) + 3);
  // Print the title:
  oled_ptr->print(value);
  oled_ptr->display();
}